intro.txt

Java Full Stack
A full-stack developer is a person who can develop application's backend and frontend. Java full-stack is basically a term used for a web developer that uses Java to develop the entire technology stack is referred to as Java full stack developer.


A developer should have the following skills to become a Java full-stack developer:

1. Import projects and files
The developer should know about installing IDE's in the system such as IntelliJ and Eclipse, hello world program in IntelliJ, how we can import project files, how we can import eclipse(Java IDE) projects in IntelliJ. These are a very basic concept which not only an experience but also a fresher candidate should have.

2. Decision making under Java
The developer should have knowledge of decision-making statements and the operators which are used to make a decision. Operators such as arithmetic operators, assignments operators, and ternary operators are used for decision making. If, else if, and else statements play an important role in decision making. So, a developer should have knowledge of all the decision-making statements and operators.

3. Flow Control
After decision-making, the developer should know control flow statements and looping statements such as while, do-while, for, switch case, break, continue, modulo operator and nested loop, etc. A developer cannot write a code if he/she has no knowledge of flow control. For a full-stack position, firstly, you should have to gain knowledge of all the basic concepts of Java because you can't develop lengthy codes for an organization if your basics are not clear of Java.

4. Methods
The developer should have knowledge of parameterized and non-parameterized methods with the return type. Method overloading and method overriding are the two most important concepts of polymorphism, which play an important role in developing Java web and desktop applications. Java is an object-oriented programming language, so your concepts of methods should be crystal and clear. The developer should also have good knowledge of code block, indentation, and statements.


5. Oops Concepts
The developer should have knowledge of all the Opps concepts because Java is completely based on objects, methods, and classes. Before diving into advanced Java, you should have to clear the concepts of core Java such as Classes, Getters, Setters, Constructors, Inheritance, Composition, Encapsulation, Abstraction, Objects, and Polymorphism, etc.





6. Core Concepts
The Oops concepts are the building blocks for every object-oriented programming language. The core concepts include Interfaces, Abstract class, multiple inheritances using interface, Inner class, Nested class, Local inner class, Anonymous object, Anonymous inner class, User input, Static elements, Static inner class, Final keyword, Packages, Scope, Access modifier, Exception handling, multiple try-catch blocks, Finally, block, Throw and throws, User-defined exception, Checked and unchecked exception, Enum, and Strings(String literals, String Object, String methods, String formatting), etc. If you have no knowledge of the core concepts of Java, get knowledge of all the above-mentioned concepts deeply.



7. Java Array
We can include Java array in core concepts, but it will be good to separate it from core concepts. The array is one of the big concepts in itself because we can perform several operations in it. We should know initializing and defining arrays, ways to define or initialize an array, perform iteration on it using for loop, access and remove variables from it, call by value and call by reference methods, and many more.



8. Collection Framework
All the above-discussed concepts are part of the core Java. Once you get knowledge of the entire core Java concepts, you are ready to dive into advanced Java and get knowledge of its concepts. The collection Framework is the 1st most important framework that provides several useful classes such as ArrayList, Stack, LinkedList, Iterators, Comparable interface, etc. We should have the implementation knowledge of all these classes and interfaces along with their methods.

The collection framework also provides some complex classes such as Set, Queue, Dequeue, Map, and TreeMap. For building complex logic and codes, these classes are very helpful to maintain data. Along with these classes, the developer should also have knowledge of different types of Sets, Custom sorting using a comparator, Equal and hashcode methods, and Searching under Maps


9. Generics
A developer should have knowledge of Generics in Java along with type parameters, generic method, bounded type parameter comparable interface, and wildcards. These are very important for developing complex and lengthy codes.


10. Multi-threading Concurrency Control
In Java, concurrency control and multi-threading concurrency are the two most important topics of advanced Java. The developer should have knowledge of multi-threading, how to create a thread by extending the thread class or implementing the runnable interface, Synchronization under concurrency control, Synchronized method, Synchronized block, Synchronized block on the object, Static Synchronization, Volatile keyword, Wait and notify, Interrupt, join, thread pools, CountDownLatch, Blocking queue, Reentrant lock, and Deadlock, etc. These concepts are required for writing logic or developing multi-threading applications in Java.

11. Lambda Expression
Lambda Expression was added in Java SE 8 to represent one method interface using an expression. The developer should also have knowledge of predicates and lambda expressions with methods and iterators. Lambda expression:

Very useful in the collection library.
Helps to iterate data from the collection.
Helps to filter and extract data from the collection.
Provides the implementation of an interface that has a functional interface.
Saves a lot of code.










