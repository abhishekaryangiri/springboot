intro.txt

Java Full Stack
A full-stack developer is a person who can develop application's backend and frontend. Java full-stack is basically a term used for a web developer that uses Java to develop the entire technology stack is referred to as Java full stack developer.


A developer should have the following skills to become a Java full-stack developer:

1. Import projects and files
The developer should know about installing IDE's in the system such as IntelliJ and Eclipse, hello world program in IntelliJ, how we can import project files, how we can import eclipse(Java IDE) projects in IntelliJ. These are a very basic concept which not only an experience but also a fresher candidate should have.

2. Decision making under Java
The developer should have knowledge of decision-making statements and the operators which are used to make a decision. Operators such as arithmetic operators, assignments operators, and ternary operators are used for decision making. If, else if, and else statements play an important role in decision making. So, a developer should have knowledge of all the decision-making statements and operators.

3. Flow Control
After decision-making, the developer should know control flow statements and looping statements such as while, do-while, for, switch case, break, continue, modulo operator and nested loop, etc. A developer cannot write a code if he/she has no knowledge of flow control. For a full-stack position, firstly, you should have to gain knowledge of all the basic concepts of Java because you can't develop lengthy codes for an organization if your basics are not clear of Java.

4. Methods
The developer should have knowledge of parameterized and non-parameterized methods with the return type. Method overloading and method overriding are the two most important concepts of polymorphism, which play an important role in developing Java web and desktop applications. Java is an object-oriented programming language, so your concepts of methods should be crystal and clear. The developer should also have good knowledge of code block, indentation, and statements.


5. Oops Concepts
The developer should have knowledge of all the Opps concepts because Java is completely based on objects, methods, and classes. Before diving into advanced Java, you should have to clear the concepts of core Java such as Classes, Getters, Setters, Constructors, Inheritance, Composition, Encapsulation, Abstraction, Objects, and Polymorphism, etc.





6. Core Concepts
The Oops concepts are the building blocks for every object-oriented programming language. The core concepts include Interfaces, Abstract class, multiple inheritances using interface, Inner class, Nested class, Local inner class, Anonymous object, Anonymous inner class, User input, Static elements, Static inner class, Final keyword, Packages, Scope, Access modifier, Exception handling, multiple try-catch blocks, Finally, block, Throw and throws, User-defined exception, Checked and unchecked exception, Enum, and Strings(String literals, String Object, String methods, String formatting), etc. If you have no knowledge of the core concepts of Java, get knowledge of all the above-mentioned concepts deeply.



7. Java Array
We can include Java array in core concepts, but it will be good to separate it from core concepts. The array is one of the big concepts in itself because we can perform several operations in it. We should know initializing and defining arrays, ways to define or initialize an array, perform iteration on it using for loop, access and remove variables from it, call by value and call by reference methods, and many more.



8. Collection Framework
All the above-discussed concepts are part of the core Java. Once you get knowledge of the entire core Java concepts, you are ready to dive into advanced Java and get knowledge of its concepts. The collection Framework is the 1st most important framework that provides several useful classes such as ArrayList, Stack, LinkedList, Iterators, Comparable interface, etc. We should have the implementation knowledge of all these classes and interfaces along with their methods.

The collection framework also provides some complex classes such as Set, Queue, Dequeue, Map, and TreeMap. For building complex logic and codes, these classes are very helpful to maintain data. Along with these classes, the developer should also have knowledge of different types of Sets, Custom sorting using a comparator, Equal and hashcode methods, and Searching under Maps


9. Generics
A developer should have knowledge of Generics in Java along with type parameters, generic method, bo
In Java, concurrency control and multi-threading concurrency are the two most important topics of advanced Java. The developer should have knowledge of multi-threading, how to create a thread by extending the thread class or implementing the runnable interface, Synchronization under concurrency control, Synchronized method, Synchronized block, Synchronized block on the object, Static Synchronization, Volatile keyword, Wait and notify, Interrupt, join, thread pools, CountDownLatch, Blocking queue, Reentrant lock, and Deadlock, etc. These concepts are required for writing logic or developing multi-threading applications in Java.

11. Lambda Expression
Lambda Expression was added in Java SE 8 to represent one method interface using an expression. The developer should also have knowledge of predicates and lambda expressions with methods and iterators. Lambda expression:

Very useful in the collection library.
Helps to iterate data from the collection.
Helps to filter and extract data from the collection.
Provides the implementation of an interface that has a functional interface.
Saves a lot of code.



12. Find Handling
File handling is a concept that is important for each and every programming. In order to work with files, the developer should have knowledge of all the concepts related to read and write into the files. The developer should be experienced in Data streams, Creating files on disk, Creating a directory, writing onto files, Reading files with buffer, Reading files with a scanner, Scanner v/s a Buffered reader, File deletion, Try with resources and Serialization of Objects.

All the concepts which we mentioned above are required to develop applications that work with files. So, for a Java full-stack developer position, you should have experienced in these concepts




13. Debugging
Debugging is a process or steps to find bugs and errors in the code. Debugging plays an important role in improving code quality. Developers should have the quality to debug their code. Debugging is helpful not only for debugging the code but also for understanding the flow of program code. The developer should have knowledge of how the value is updated at runtime, what is watch and how we can apply watch on variables.




14. GIT basics
GIT is one of the most widely used modern version control systems. It is an open-source project developed by Linus Torvalds in 2005. Java developers are user GIT for keeping any set of projects using a version control system. To become a Java full-stack developer, the developer should have knowledge of the following:

Features of GIT.
Setting up GIT.
Clone and import GIT project into eclipse.
Clone GIT project directly from eclipse.



15. JSP and Servlets
JSP and Servlets is a complete tutorial in itself. A developer should have knowledge of the following concepts:

Java Full Stack
a) JSP & Servlets basics

It includes concepts Servlets life cycle, JSP expressions element, JSP scriptlets element, JSP declarations element, JSP comment element, JSP directive element, Deployment descriptor, and annotations, JSP configuration in the deployment descriptor, Reading URL parameters, Include files in JSP page, Import class into JSP page, Forward and redirect under JSP, MVC overview, basic redirection using servlet and application based on MVC.

b) JSP & Servlets: Forms

The developer should have knowledge of creating forms using JSP and servlets, form elements, forms under JSP and Servlet, and form validation, etc. These concepts are required to design forms using Java. Each and every application needs to have an authentication page such as login or signup for security reasons. So, we cannot think of designing or developing an application without creating a form.

c) JSP & Servlets: Java Beans and Session management

Java Beans and Session management are both required to develop an application. Basically, a bean is a reusable software component that encapsulates many objects into a single object so that we can access it from multiple places. Session management is essential for Java web applications to manage user sessions by using several ways such as Cookies and HttpSession etc.

Bean scope, session, page & application, request scope, Beans with web forms, Session under JSP, Read & write operation of the cookie, user logout, Organizing application, Fixing redirect and forward links, handling session without a cookie, and servlet filters are the necessary topic whose knowledge is required to become a Java full stack developer.

d) JSP & Servlets: JSTL tags

JSTL tags are categorized into 5 parts, i.e., JSTL core tags, JSTL functions tags, JSTL XML tags, JSTL formatting tags and JSTL custom tag. JSTL core tags include concepts JSTL setup, JSTL set and remove tags, Reading from Bean using expression language, decision making under JSTL, JSTL choose and when tags, JSTL for loop, JSTL forEach loop, JSTL for Tokens tag, JSTL import and param tag, JSTL URL and redirect tag, and JSTL catch tag.

JSTL functions tags include JSTL length functions, JSTL trim and escapeXml function, JSTL more function, JSTL even more function and JSTL split and join function.

JSTL XML tags include JSTL XML and Parse and Out tag, JSTL XML ForEach and if tag, and JSTL XML Choose When otherwise.

JSTL formatting tags include formatting date and number(Document).

JSTL custom tag is a tag creating by the developer.

e) JSP & Servlets: Integrate web template

It is another important concept of JSP and Servlet. Many times, we need to integrate web templates into our application. In order to integrate web templates, we should have knowledge of how we can extract header and footer from the template, how to integrate the template with the project, and integrate the template with the project using JSTL.

f) JSP & Servlets: Remaining concepts

A developer should also have knowledge of how we can interact with the database, how to use the workbench, setup of the JNDI, how we can listing data on the webpage, how to use of include directive, how to add, update, delete and fetch record from the database, adding JSTL support, and Image/File upload, etc.


\16. Hibernate
Hibernate is another concept of Java. A developer should be familiar with the Hibernate and its architecture and should also have implementation knowledge of it. The developer should be experienced in MySQL and SQL workbench. In hibernate, the developer should have familiar with Session factory and session, Adding Entity class, Hibernate in Action, CRUD-Retrieving Record from Database, CRUD-Updating a Record in Database, CRUD-Deleting Record from the database, HQL(Hibernate Query Language), HQL Where clause, Update record using HQL, Deleting record using HQL, integrate hibernate with JSP and Servlet, hibernate configuration, Hibernate entity class with JSP and Servlet, Hibernate in action with JSP and Servlet, display image files, improve the view of the page, adding update information form, implement update information functionality, update specific column data using hibernate, add view image action, implement view image page, and add delete image action. All the above-mentioned concepts are related to hibernate, and hibernate is the framework that is very important for Java full-stack developers.


17. Spring framework
Spring is a framework that is mostly used for Java. It provides a comprehensive programming and configuration model for modern Java-based enterprise applications. In order to work with the Spring framework, we should have knowledge of the required software, Inversion of control, Dependency injection, Autowire scenarios, Qualifier annotation, Spring Bean, Constructor injection, Spring project on IntelliJ, Adding SpringMVC support on Eclipse, Simple dynamic web project, Model in a web project, Spring MVC minimal setup, Basic form with Spring MVC, ModelAndView and foreach on data, Springform elements such as Input and Radio, Radio-buttons and background, Dropdown list, Text area, checkbox, etc., Adding STS 3 support into Eclipse, Add external resource, add style sheet, Form validation, Database connectivity using JDBC(XML configuration and Annotation), Exception handling under Spring MVC, Restful API web service, database connectivity with hibernate, JAX-RS, Spring MVC + Restful web service background, building restful microservice with spring boot, and restful micro-service with database connectivity.

All the above concepts are required to become a full-stack Java developer. If you have knowledge of all these concepts, you will definitely crack the interview process of a Java full-stack developer.


Who is Java Developer?
A Java Developer is a specialized programmer who work on business applications, software, and websites along with software engineers and web developers. Java developer can work in following two domains:

Software/Backend development: As a software developer or backend developer, the Java developer has to perform requirement gathering, designing, database connectivity etc.
Mobile App development: A Java developer working in mobile app development domain operate on technologies such as Android development with Kotlin/Java.

Technical Skills required For Java Developer
Hands-on practice in Core Java Programming
Strong knowledge of object-oriented programming concepts, exception handling, and memory management
Must know concepts of multi-threading and dependency injection
Knowledge of HTML, XML, JSON, CSS, JavaScript, JSP, and Servlet
Good knowledge of relational and/or non-relational databases such as MySQL, MongoDB, etc.
Ability to work with ORM frameworks and technologies for example, JPA2 and Hibernate
Work experience in any Java IDE tool such as Eclipse, Intellij IDE
Experience in one of the framework - Spring, Struts, JSF
Knowledge of build tools such as Maven, Gradle, etc.
Version control (Git repository)
Awareness of CI/CD and DevOps and tools like Jenkins, GitHub pipelines, etc.



Other Preferred Skills
Experience in developing SaaS, PaaS, and cloud-based web applications
Knowledge of design principles and fundamentals of the software development lifecycle
Familiar with Java libraries and integration of front-end with back-end
Experience of the quality standards and best code practices
Basic knowledge of domains and business processes
Familiar with agile and DevOps methodologies
Logical thinking, good analytical skills, and a problem-solving attitude
Ability to multitask and manage projects with priorities
Result-oriented, growth, and constant learning mindset
Good team player and guide team members whenever required
Excellent interpersonal skills, good verbal and written communication skills
Must be updated with latest technologies and trends
Analyze and create implementation strategies and improvement plans
Contribute to the organizational processes to increase productivity
Strong debugging skills and experience in test-driven development
Good knowledge of testing and continuous deployment environment
Passionate about delivering quality code within the timeline
Hands-on experience in cloud application development and deployment
Collaborate with the team and share improvement ideas, policies, and opportunities to increase the overall experience
Experience in Agile development and tools like SCRUM, KANBAN, etc.
The above list contains several soft skills that are not tied to a specific job role. A job description of a Java developer requires specific tools and frameworks as a part of the requirement.


Salary of a Java Developer
Working as a Java developer is one of the highest-paying and rewarding job worldwide. In India, the average base salary of a Java developer is mentioned below.

Level	Experience (in Years)	Salary in India (Rs.)	Salary in US ($)
Fresher	>1 Year	293,272	
Early Career	1-4 Years	426,176	
Mid-Career	5-9 Years	872,366	
Experienced	< 10 Years	1,396,371

\

Roles and Responsibilities of a Java Developer
The roles and responsibilities of a Java developer/engineer will vary greatly depending on the company and specific position. Here are some typical responsibilities:

Backward Skip 10s

Play Video

Forward Skip 10s


Designing, implementing, and maintaining Java applications that are often high-volume and low-latency, required for mission-critical systems
Delivering high availability and performance
Contributing in all phases of the development lifecycle
Writing well-designed, efficient, and testable code
Conducting software analysis, programming, testing, and debugging
Managing Java and Java EE application development
Ensuring designs comply with specifications
Preparing and producing releases of software components
Transforming requirements into stipulations
Support continuous improvement
Investigating alternatives and technologies
Presenting for architectural review


Thread States in Java
A thread is a program in execution created to perform a specific task. Life cycle of a Java thread starts with its birth and ends on its death.

The start() method of the Thread class is used to initiate the execution of a thread and it goes into runnable state and the sleep() and wait() methods of the Thread class sends the thread into non runnable state.

After non runnable state, thread again comes into runnable state and starts its execution. The run() method of thread is very much important. After executing the run() method, the lifecycle of thread is completed.

All these phases of threads are the states of thread in Java.
Play

Next
Unmute
Current TimeÂ 
0:00
/
DurationÂ 
18:10
Â 
Fullscreen

Backward Skip 10s

Play Video

Forward Skip 10s

To work with threads in a program, it is important to identify thread state. The following figure shows thread states in Java thread life cycle.




Thread States in Java
A thread is a path of execution in a program that goes through the following states of a thread. The five states are as follows:

New
Runnable
Running
Blocked (Non-runnable state)


New (Newborn State)
When an instance of the Thread class is created a new thread is born and is known to be in New-born state. That is, when a thread is born, it enters into new state but its execution phase has not been started yet on the instance.

In simpler terms, Thread object is created but it cannot execute any program statement because it is not in an execution state of the thread. Only start() method can be called on a new thread; otherwise, an IllegalThreadStateException will be thrown.


Runnable State
The second phase of a new-born thread is the execution phase. When the start() method is called on a the new instance of a thread, it enters into a runnable state.
In the runnable state, thread is ready for execution and is waiting for availability of the processor (CPU time). There are many threads that are ready for execution, they all are waiting in a queue (line).

If all threads have equal priority, a time slot is assigned for each thread execution on the basis of first-come, first-serve manner by CPU. The process of allocating time to threads is known as time slicing. A thread can come into runnable state from running, waiting, or new states.


Running State
Running means Processor (CPU) has allocated time slot to thread for its execution. When thread scheduler selects a thread from the runnable state for execution, it goes into running state. Look at the above figure.

In running state, processor gives its time to the thread for execution and executes its run method. It is the state where thread performs its actual functions. A thread can come into running state only from runnable state.










